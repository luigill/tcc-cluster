import numpy as np
from sklearn.cluster import AffinityPropagation
import distance

words = words = [
    "conseguiu",
    "conseigiu",
    "conseguiu",
    "conseguiu",
    "concegiu",
    "conceguiu",
    "consegui",
    "consegi",
    "ninguém",
    "ninguem",
    "nigem",
    "niguem",
    "ningem",
    "assalto",
    "assauto",
    "asauto",
    "asalto",
    "assautu",
    "asautu",
    "alguém",
    "alguem",
    "alquem",
    "agluém",
    "algem",
    "algém",
    "auguem",
    "auguém",
    "exame",
    "ezame",
    "exeme",
    "embaixo",
    "embaio",
    "embaixo",
    "embaixu",
    "enbaixu",
    "embaixio",
    "enbaixo",
    "enbeixo",
    "fez",
    "fes",
    "também",
    "tamém",
    "tanbem",
    "faz",
    "fas",
    "fás",
    "guerra",
    "guera",
    "guarra",
    "exemplo",
    "ezemplo",
    "exenplo",
    "caiu",
    "ciau",
    "cai",
    "enxergar",
    "enchergar",
    "enxerg",
    "almoço",
    "aumoco",
    "aumoço",
    "almoco",
    "vez",
    "ves",
    "fez",
    "relógio",
    "reógio",
    "relogio",
    "relógiu",
    "relogiu",
    "jeito",
    "geito",
    "jeitto",
    "disse",
    "dise",
    "árvore",
    "ávore",
    "arvore",
    "arvre",
    "arvure",
    "árvure",
    "arvere",
    "árvere",
    "borracha",
    "borraca",
    "boracha",
    "borraca",
    "pegue",
    "pegue",
    "peg",
    "saudade",
    "saudede",
    "saudade",
    "assim",
    "asim",
    "assím",
    "amanhã",
    "amanhã",
    "amanha",
    "correr",
    "corer",
    "correr",
    "brincar",
    "brinca",
    "bringar",
    "homem",
    "omem",
    "home",
    "gente",
    "jenti",
    "genti",
    "viajar",
    "viaja",
    "viajer",
    "certo",
    "sero",
    "certo",
    "encontrou",
    "encontrou",
    "encontou",
    "quente",
    "quenti",
    "quente",
    "cabeça",
    "cabessa",
    "cabecca",
    "professora",
    "professo",
    "professoura",
    "futebol",
    "futebom",
    "futibol",
    "feliz",
    "felez",
    "felis",
    "ajuda",
    "ajuda",
    "aujda",
    "fazer",
    "faser",
    "facer",
    "tenho",
    "tenho",
    "teho",
    "tempo",
    "tempa",
    "tem",
    "tesoura",
    "tisoura",
    "tesora",
    "tisora",
    "muito",
    "muitu",
    "muto",
    "mutio",
    "quando",
    "cuendo",
    "quado",
    "cachorro",
    "gaxorro",
    "caxorro",
    "então",
    "entao",
    "emtão",
    "presente",
    "peresente",
    "prezente",
    "bruxa",
    "brucha",
    "animal",
    "animau",
    "aninal",
    "anemal",
    "girafa",
    "jirafa",
    "grafa",
    "carro",
    "caro",
    "car",
    "porque",
    "porquê",
    "porke",
    "galinha",
    "galin",
    "galinga",
    "menino",
    "meni",
    "men",
    "casa",
    "cassa",
    "ca",
    "escola",
    "escol",
    "esola",
    "ecol",
]
# Replace this line
words = np.asarray(words)  # So that indexing with a list will work
lev_similarity = -1 * np.array(
    [[distance.levenshtein(w1, w2) for w1 in words] for w2 in words]
)

affprop = AffinityPropagation(affinity="precomputed", damping=0.5)
affprop.fit(lev_similarity)
for cluster_id in np.unique(affprop.labels_):
    exemplar = words[affprop.cluster_centers_indices_[cluster_id]]
    cluster = np.unique(words[np.nonzero(affprop.labels_ == cluster_id)])
    cluster_str = ", ".join(cluster)
    print(" - *%s:* %s" % (exemplar, cluster_str))
